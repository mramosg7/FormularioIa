// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Define el modelo Plan
model plan {
  id          String     @id @default(uuid()) @map("id") // Mapea a UUID en la base de datos
  descripcion String

   usuarios    usuario[]  
}

// Define el modelo Usuario
model usuario {
  id       String    @id @default(uuid()) @map("id") // Mapea a UUID en la base de datos
  nombre   String
  nick     String
  email    String
  password String
  plan     plan?      @relation(fields: [planId], references: [id])
  planId   String?
  formularios formulario[]
}

// Define el modelo Formulario
model formulario {
  id          String    @id @default(uuid()) @map("id") // Mapea a UUID en la base de datos
  usuario     usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId   String
  name        String
  description String
  image       String    @default("formDefault")
  preguntasformulario preguntaformulario[]
  createdAt     DateTime            @default(now())
}

// Define el modelo tipoPregunta
model tipopregunta {
  id          String    @id @default(uuid()) @map("id") // Mapea a UUID en la base de datos
  descripcion String
  preguntasformulario preguntaformulario []
}

// Define el modelo preguntaFormulario
model preguntaformulario {
  id          String    @id @default(uuid()) @map("id") // Mapea a UUID en la base de datos
  formulario  formulario @relation(fields: [formularioId], references: [id])
  formularioId String
  texto       String
  tipo        tipopregunta @relation(fields: [tipoId], references: [id])
  tipoId      String

  opcionespregunta opcionpregunta[]
  respuestasusuario respuestausuario[]

 
}

// Define el modelo opcionPregunta
model opcionpregunta {
  id       String            @id @default(uuid()) @map("id") // Mapea a UUID en la base de datos
  pregunta preguntaformulario @relation(fields: [preguntaId], references: [id])
  preguntaId String
  text     String
  value    String

  respuestausuario respuestausuario[]

}

// Define el modelo respuestausuario
model respuestausuario {
  id          String     @id @default(uuid()) @map("id")
  pregunta    preguntaformulario @relation(fields: [preguntaId], references: [id])
  preguntaId  String
  opcion      opcionpregunta? @relation(fields: [opcionId], references: [id])
  opcionId    String?
  respuesta   String?
}
